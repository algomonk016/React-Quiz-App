{"version":3,"sources":["Quiz-App/App.jsx","Quiz-App/Components/QuizModal.jsx","Quiz-App/Components/TestScore.jsx","Quiz-App/Quiz.jsx","App.jsx","index.js"],"names":["QuizApp","listStyle","className","to","QuizModal","Questions","submission","customStyles","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","border","Modal","setAppElement","React","useState","modalIsOpen","setIsOpen","closeModal","correct","onClick","window","location","replace","isOpen","onRequestClose","style","contentLabel","map","qstn","ind","questionText","answerOptions","isCorrect","answerText","obj","index","TestScore","score","count","length","Math","floor","Quiz","interval","currentQuestion","setCurrentQuestion","setScore","showScore","setShowScore","setSubmission","setCount","tick","useEffect","setInterval","clearInterval","i","newArr","setInitialSubmission","goNext","optionStyle","Number","isInteger","answerOption","ansInd","handleSelect","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94147dba.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst QuizApp = () => {\r\n    const listStyle = \"my-1\"\r\n    return (\r\n        <div className=\"bg-gray-700 h-screen p-5\">\r\n            <div className=\"container p-3 w-1/2 text-purple-800 mx-auto bg-gray-200 rounded-md\">\r\n                <p className=\"text-4xl text-center\">Quiz App</p> <br />\r\n                <div>\r\n                    <p className=\"text-2xl mb-2\">Features:</p>\r\n                    <li className={listStyle}> User friendly UI. </li>\r\n                    <li className={listStyle}> Question navigation on the left section of the quiz, that also shows your submission. </li>\r\n                    <li className={listStyle}> Tells score at the end with percentage and time taken.</li>\r\n                    <li className={listStyle}> You can cross check the answers after the submission of quiz. </li>\r\n                </div>\r\n                <Link to=\"/quiz\" className=\"flex justify-around bg-green-300 text-green-700 w-auto py-2 mt-4 rounded hover:bg-green-400 hover:text-green-900\"> Start Quiz </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizApp\r\n","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nconst QuizModal = ({ Questions, submission }) => {\r\n\r\n    let bgOverlayColor = 'rgba(0,0,0,0.625)'\r\n    let closeStyle = \"z-10 mt-2 mr-2 px-1 w-10 h-10 bg-red-300 text-red-700 hover:bg-red-400 hover:text-red-900 rounded-full absolute right-0 top-0\";\r\n\r\n    const customStyles = {\r\n        overlay: {\r\n            backgroundColor: bgOverlayColor,\r\n        },\r\n        content: {\r\n            top: '50%',\r\n            left: '50%',\r\n            right: 'auto',\r\n            bottom: 'auto',\r\n            marginRight: '-50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            border: 'none',\r\n        }\r\n    };\r\n\r\n\r\n    Modal.setAppElement('#root')\r\n\r\n    var subtitle;\r\n    const [modalIsOpen, setIsOpen] = React.useState(false);\r\n    function openModal() {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    function closeModal() {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    const correct = \"bg-green-300 rounded px-2 py-1 my-1\"\r\n    const wrong = \"bg-red-300 rounded px-2 py-1 my-1\"\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <div className=\"flex justify-center mt-4\">\r\n                <button onClick={openModal} className=\"bg-orange-300 text-orange-700 py-1 mx-2 px-4 rounded hover:bg-orange-400 hover:text-orange-900\">Submissions</button>\r\n                <button onClick={() => window.location.replace('/')} className=\"bg-purple-300 text-purple-700 py-1 px-4 rounded hover:bg-purple-400 hover:text-purple-900\">Try Again</button>\r\n            </div>\r\n            <Modal\r\n                isOpen={modalIsOpen}\r\n                onRequestClose={closeModal}\r\n                style={customStyles}\r\n                contentLabel=\"Quiz Result\"\r\n            >\r\n\r\n                <div className=\"\">\r\n                    <div className=\"flex px-3 shadow-lg\">\r\n                        <button onClick={closeModal} className={closeStyle}> &#10005; </button>\r\n                    </div>\r\n\r\n                    <div className=\"\">\r\n                        {\r\n                            Questions.map((qstn, ind) => (\r\n                                <div key={ind} className=\" py-2\">\r\n                                    Q: {ind + 1} <br />\r\n                                    <p> {qstn.questionText} </p>\r\n\r\n                                    {\r\n                                        qstn.answerOptions[submission[ind]].isCorrect === true ? (\r\n                                            <p className={correct}>\r\n                                                {qstn.answerOptions[submission[ind]].answerText}\r\n                                            </p>\r\n                                        ) : (\r\n                                            <>\r\n                                                <p className={wrong}>\r\n                                                    {qstn.answerOptions[submission[ind]].answerText}\r\n                                                </p>\r\n                                                {\r\n                                                    qstn.answerOptions.map((obj, index) => (\r\n                                                        obj.isCorrect === true ? (\r\n                                                            <p className={correct}>\r\n                                                                {obj.answerText}\r\n                                                            </p>\r\n                                                        ) : ''\r\n                                                    ))\r\n                                                }\r\n                                            </>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default QuizModal\r\n","import React from 'react'\r\nimport QuizModal from './QuizModal'\r\nconst TestScore = ({ Questions, score, count, submission }) => {\r\n    return (\r\n        <>  \r\n            <p className=\"text-3xl text-center my-5 mr-10\">Quiz Result</p>\r\n            <div className=\"container mx-auto w-3/4 bg-gray-300 rounded-md p-5 text-center mt-5\">\r\n                <table className=\"mx-auto text-left\">\r\n                    <tbody className>\r\n                        <tr>\r\n                            <td>The Score is: </td>\r\n                            <td className=\"px-3\">{score}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Percentage: </td>\r\n                            <td className=\"px-3\">{(score / Questions.length) * 100}%</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Time taken: </td>\r\n                            <td className=\"px-3\">{Math.floor(count / 60)}min : {count % 60}s</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <QuizModal Questions={Questions} submission = {submission} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestScore\r\n","import React, { useEffect, useState } from 'react'\r\nimport TestScore from './Components/TestScore';\r\n\r\nconst Quiz = () => {\r\n    const Questions = [\r\n        {\r\n            questionText: 'What is the capital of France?',\r\n            answerOptions: [\r\n                { answerText: 'New York', isCorrect: false },\r\n                { answerText: 'London', isCorrect: false },\r\n                { answerText: 'Paris', isCorrect: true },\r\n                { answerText: 'Dublin', isCorrect: false },\r\n            ],\r\n        },\r\n        {\r\n            questionText: 'Who is CEO of Tesla?',\r\n            answerOptions: [\r\n                { answerText: 'Jeff Bezos', isCorrect: false },\r\n                { answerText: 'Elon Musk', isCorrect: true },\r\n                { answerText: 'Bill Gates', isCorrect: false },\r\n                { answerText: 'Tony Stark', isCorrect: false },\r\n            ],\r\n        },\r\n        {\r\n            questionText: 'The iPhone was created by which company?',\r\n            answerOptions: [\r\n                { answerText: 'Apple', isCorrect: true },\r\n                { answerText: 'Intel', isCorrect: false },\r\n                { answerText: 'Amazon', isCorrect: false },\r\n                { answerText: 'Microsoft', isCorrect: false },\r\n            ],\r\n        },\r\n        {\r\n            questionText: 'How many Harry Potter books are there?',\r\n            answerOptions: [\r\n                { answerText: '1', isCorrect: false },\r\n                { answerText: '4', isCorrect: false },\r\n                { answerText: '6', isCorrect: false },\r\n                { answerText: '7', isCorrect: true },\r\n            ],\r\n        },\r\n    ]\r\n\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [showScore, setShowScore] = useState(0);\r\n    const [submission, setSubmission] = useState([])\r\n    const [count, setCount] = useState(0)\r\n\r\n    const tick = () => {\r\n        setCount(count + 1)\r\n    }\r\n\r\n    let interval\r\n    useEffect(() => {\r\n        interval = setInterval(tick, 1000)\r\n        return ()=> {\r\n            clearInterval(interval)\r\n        }\r\n    }, [count])\r\n\r\n    const setInitialSubmission = () =>{\r\n        for(let i=0; i<Questions.length; i++) {\r\n            let newArr = submission\r\n            newArr[i] = \"not attended\";\r\n            setSubmission(newArr)\r\n        }\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        setInitialSubmission()\r\n    }, [])\r\n\r\n    const handleSelect = (isCorrect, currentQuestion ,ansInd) => {\r\n        if (isCorrect) setScore(score + 1)\r\n        let newArr = submission\r\n        newArr[currentQuestion] = ansInd - 1;\r\n        setSubmission(newArr)\r\n        goNext()\r\n    }\r\n\r\n    const goNext = () => {\r\n        setCurrentQuestion((currentQuestion + 1) % Questions.length)\r\n    }\r\n\r\n    const goPrev = () => {\r\n        if (currentQuestion === 0) setCurrentQuestion(Questions.length - 1)\r\n        else setCurrentQuestion(currentQuestion - 1)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        let newArr = submission\r\n        newArr.map((obj, ind) => {\r\n            if(!Number.isInteger(obj)) newArr[ind] = 0;\r\n            ind++;\r\n        })\r\n\r\n        setSubmission(newArr)\r\n        // console.log(submission)\r\n        setShowScore(true);\r\n        clearInterval(interval)\r\n    }\r\n\r\n    const optionStyle = \"block text-left px-4 w-full border my-2 py-2 rounded hover:bg-gray-200\"\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                showScore ? (\r\n                    <TestScore Questions = {Questions} score={score} count = {count} submission={submission} />\r\n                ) : (\r\n                    <div className=\"bg-gray-200 h-screen w-screen\">\r\n                        {/* upper, contains timer */}\r\n                        <div className=\"absolute right-0 top-0 mr-5 mt-2\">\r\n                            {Math.floor(count/60)} min : {count%60} s\r\n                        </div>\r\n\r\n                        <p className=\"text-center text-4xl\"> Quiz  App </p>\r\n                        \r\n                        <div className=\"flex justify-around p-5 overflow-y-auto overflow-x-hidden pt-10\">\r\n                        \r\n                            {/* left side, contains submissions navigation */}\r\n                            <div className=\"w-64 p-2 bg-gray-100 shadow-md rounded\">\r\n                                <p className=\"text-center mb-4 text-xl\">Your Submissions</p>\r\n                                {\r\n                                    submission.map((obj, ind)=>(\r\n                                        <button onClick={()=> setCurrentQuestion(ind)} className=\"my-1 block ml-3 border-b-2 border-t-2 border-gray-400 px-2 py-1 rounded my-2 hover:bg-gray-200 w-5/6 text-left\">\r\n                                            Q{ind+1}: {Number.isInteger(obj)? `${Questions[ind++].answerOptions[obj].answerText}`: obj}\r\n                                        </button>\r\n                                    )) \r\n                                }\r\n                            </div>\r\n\r\n                            {/* middle, contains questions */}\r\n                            <div className=\"shadow-md bg-gray-100 rounded mx-2 ml-4 w-2/3 pb-3\">\r\n                                {/* question */}\r\n                                <div className=\"container\">\r\n                                    <div className=\"flex justify-between px-3 py-1\">\r\n                                        <span>Question: {currentQuestion + 1}</span>\r\n                                        <span>Total Questions: {Questions.length}</span>\r\n                                    </div>\r\n\r\n                                    <p className=\"px-3 text-lg mt-1\">{Questions[currentQuestion].questionText}</p>\r\n                                </div>\r\n\r\n                                {/* options */}\r\n                                <div className=\"px-2 mt-3\">\r\n                                    {\r\n                                        Questions[currentQuestion].answerOptions.map((answerOption, ansInd) => (\r\n                                            <button \r\n                                                key = {ansInd++} \r\n                                                className= { \r\n                                                    ansInd === submission[currentQuestion] ? \r\n                                                    optionStyle + \" bg-blue-400\" : optionStyle\r\n                                                } \r\n                                                onClick={() => handleSelect(answerOption.isCorrect, currentQuestion ,ansInd)}>\r\n                                                {answerOption.answerText}\r\n                                            </button>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n\r\n                                {/* prev and next button */}\r\n                                <div className=\"flex px-3 justify-between mt-4\">\r\n                                    <button onClick={goPrev} className=\"bg-orange-300 text-lg text-orange-700 py-1 px-4 rounded hover:bg-orange-400 hover:text-orange-900\">Previous</button>\r\n                                    <button onClick={goNext} className=\"bg-purple-300 text-lg text-purple-700 py-1 px-4 rounded hover:bg-purple-400 hover:text-purple-900\">Next</button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* submit button */}\r\n                        <button onClick={handleSubmit} className=\"bg-green-300 text-lg absolute w-40 right-0 mx-20 text-green-700 py-1 px-2 rounded hover:bg-green-400 hover:text-green-900\">Submit</button>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quiz","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport QuizApp from './Quiz-App/App';\r\nimport Quiz from './Quiz-App/Quiz';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path='/' component={QuizApp} />\r\n                <Route exact path='/quiz' component={Quiz} /> \r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}